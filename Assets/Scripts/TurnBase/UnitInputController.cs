//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/Scripts/TurnBase/UnitInputController.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace TurnBase
{
    public partial class @UnitInputController: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @UnitInputController()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""UnitInputController"",
    ""maps"": [
        {
            ""name"": ""Unit"",
            ""id"": ""77cd4518-d835-4b4d-803a-6cdd652da53d"",
            ""actions"": [
                {
                    ""name"": ""MoveClick"",
                    ""type"": ""Button"",
                    ""id"": ""527eb4b9-c552-4b8c-9fbe-a54b1323c1e5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""e1b23793-f578-4cb5-9b4e-d9a35df2e549"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // Unit
            m_Unit = asset.FindActionMap("Unit", throwIfNotFound: true);
            m_Unit_MoveClick = m_Unit.FindAction("MoveClick", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Unit
        private readonly InputActionMap m_Unit;
        private List<IUnitActions> m_UnitActionsCallbackInterfaces = new List<IUnitActions>();
        private readonly InputAction m_Unit_MoveClick;
        public struct UnitActions
        {
            private @UnitInputController m_Wrapper;
            public UnitActions(@UnitInputController wrapper) { m_Wrapper = wrapper; }
            public InputAction @MoveClick => m_Wrapper.m_Unit_MoveClick;
            public InputActionMap Get() { return m_Wrapper.m_Unit; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(UnitActions set) { return set.Get(); }
            public void AddCallbacks(IUnitActions instance)
            {
                if (instance == null || m_Wrapper.m_UnitActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_UnitActionsCallbackInterfaces.Add(instance);
                @MoveClick.started += instance.OnMoveClick;
                @MoveClick.performed += instance.OnMoveClick;
                @MoveClick.canceled += instance.OnMoveClick;
            }

            private void UnregisterCallbacks(IUnitActions instance)
            {
                @MoveClick.started -= instance.OnMoveClick;
                @MoveClick.performed -= instance.OnMoveClick;
                @MoveClick.canceled -= instance.OnMoveClick;
            }

            public void RemoveCallbacks(IUnitActions instance)
            {
                if (m_Wrapper.m_UnitActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IUnitActions instance)
            {
                foreach (var item in m_Wrapper.m_UnitActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_UnitActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public UnitActions @Unit => new UnitActions(this);
        public interface IUnitActions
        {
            void OnMoveClick(InputAction.CallbackContext context);
        }
    }
}
